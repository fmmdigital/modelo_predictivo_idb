experimento:
  id_experimento: 9
  modelo: "sobrecostos"
  descripcion: "probando rtdos con distintos parametros"


# regresion_logistica:
#   script: "algoritmos/logistic_regression.py"
#   datasets:
#     - "dataframe_sinnulls_simple"
#   hiperparametros:
#     penalty:
#       - l1
#       - l2
#     C:
#       - 0.0001
#       - 0.001
#       - 1
#       - 10
#     random_state:
#       - 42

#     class_weight:
#      - 

random_forest:
  script: "algoritmos/random_forest.py"
  datasets:
    - "dataframe_sinnulls_simple"
  hiperparametros:
    max_depth:
      - Null
      - 10
      - 50
    max_features:
      - sqrt
      - log2
      - auto
    min_samples_split:
      - 2
      - 5
      - 10
      - 20
    n_estimators:
      - 5
      - 100
      - 500
      - 1000
    n_jobs:
      - 4

xgb:
  script: "algoritmos/xgb.py"
  datasets:
    - "dataframe_sinnulls_simple"
  hiperparametros:
    n_estimators:
      - 5
      #- 100
      - 500
      - 1000
    max_depth:
      - 3
      - 5
      - 10
      - 50
    min_child_weight:
     # - 0.00001
      - 0.01
      - 1
    scale_pos_weight:
      - 1
      - 65
    learning_rate:
     # - 0.05
      - 0.3
      - 1
    n_jobs:
      - 4

# dummy_classifier:
#   script: "algoritmos/dummy_classifier.py"
#   datasets:
#     - "dataframe_sinnulls_simple"
#   hiperparametros:
#     strategy:
#       - 'stratified'
      
# adaboost:
#   script: "algoritmos/adaboost.py"
#   datasets:
#     - "dataframe_sinnulls_simple"
#   hiperparametros:
#     algorithm:
#      - SAMME
#      #  - SAMME.R
#     n_estimators:
#      #  - 1
#      - 10
#      - 1000

# SVM:
#   script: "algoritmos/svm.py"
#   datasets:
#     - "dataframe_sinnulls_simple"
#   hiperparametros:
#     C:
#     # - 1.0e-05
#      - 0.0001
#       # - 0.001
#      - 0.01
#       # - 0.1
#      - 1
#       # - 10
#     kernel:
#     - linear

KNN:
  script: "algoritmos/knn.py"
  datasets:
    - "dataframe_sinnulls_simple"
  hiperparametros:
    algorithm:
     - auto
     - ball_tree
     - kd_tree
    n_neighbors:
     - 1
     - 5
     - 10
     - 25
     - 50
     - 100
    weights:
     - uniform
     - distance

# SGD:
#   script: "algoritmos/sgd.py"
#   datasets:
#     - "dataframe_sinnulls_simple"
#   hiperparametros:
#       loss:
#       - hinge
#       - log
#       - perceptron
#       penalty:
#       - l2
#       - l1
#       - elasticnet